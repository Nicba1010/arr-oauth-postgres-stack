x-service-base: &service-base
  restart: always

x-traefik-networked-service-labels-base: &traefik-networked-service-labels-base
  # Enable Traefik for the service
  traefik.enable: true
  # Specify the network for Traefik to use
  traefik.docker.network: traefik_network

x-arr-service-environment-base: &arr-service-environment-base
  PUID: 1000
  PGID: 1000
  TZ: ${TZ:-Etc/UTC}

x-arr-service-base: &arr-service-base
  <<: *service-base
  healthcheck:
    test: curl -f http://localhost:$$ARR_SERVICE_PORT/ping -s | jq -e 'select(.status == "OK")' > /dev/null || exit 1
    interval: 30s
    timeout: 5s
    retries: 3
    start_period: 20s

x-postgres-service-volumes-base: &postgres-service-volumes-base
  - type: bind
    source: ./init_multiple_dbs.sh
    target: /docker-entrypoint-initdb.d/init_multiple_dbs.sh
    read_only: true

x-postgres-service-environment-base: &postgres-service-environment-base
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_PORT: 5432
  POSTGRES_MULTIPLE_DATABASES: main,log

x-postgres-service-base: &postgres-service-base
  <<: *service-base
  image: postgres:${POSTGRES_IMAGE_TAG}
  environment:
    <<: *postgres-service-environment-base
  healthcheck:
    test: [ "CMD", "pg_isready", "-U", "postgres" ]
    interval: 30s
    timeout: 5s
    retries: 3
    start_period: 5s

x-oauth2-proxy-service-environment-base: &oauth2-proxy-service-environment-base
  OAUTH2_PROXY_PROVIDER: oidc
  OAUTH2_PROXY_COOKIE_SECURE: true
  OAUTH2_PROXY_EMAIL_DOMAINS: '*'
  OAUTH2_PROXY_UPSTREAMS: static://202
  OAUTH2_PROXY_HTTP_ADDRESS: 0.0.0.0:4180
  OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: true
  OAUTH2_PROXY_PASS_AUTHORIZATION_HEADER: true
  OAUTH2_PROXY_PASS_ACCESS_TOKEN: true
  OAUTH2_PROXY_PASS_USER_HEADERS: true
  OAUTH2_PROXY_SET_XAUTHREQUEST: true
  OAUTH2_PROXY_SET_AUTHORIZATION_HEADER: true
  OAUTH2_PROXY_SKIP_CLAIMS_FROM_PROFILE_URL: true
  OAUTH2_PROXY_SCOPE: openid profile email

x-oauth2-proxy-service-base: &oauth2-proxy-service-base
  <<: *service-base
  image: quay.io/oauth2-proxy/oauth2-proxy:latest-alpine
  networks:
    - traefik_network

services:
  traefik:
    image: traefik:v2
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"

      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"

      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      - "--certificatesresolvers.default.acme.dnschallenge=true"
      - "--certificatesresolvers.default.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.default.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53"
      - "--certificatesresolvers.default.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.default.acme.storage=/letsencrypt/acme.json"
    environment:
      CF_DNS_API_TOKEN: ${CLOUDFLARE_API_TOKEN}
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt_cert_storage:/letsencrypt
    networks:
      - traefik_network
    restart: always

  prowlarr:
    <<: *arr-service-base
    image: lscr.io/linuxserver/prowlarr:${PROWLARR_IMAGE_TAG}
    volumes:
      - prowlarr_config:/config
    environment:
      <<: *arr-service-environment-base
      PROWLARR__AUTH__METHOD: Forms
      PROWLARR__AUTH__REQUIRED: DisabledForLocalAddresses
      PROWLARR__POSTGRES__HOST: prowlarr-postgres
      PROWLARR__POSTGRES__PORT: ${DEFAULT_ARR_POSTGRES_PORT}
      PROWLARR__POSTGRES__USER: ${DEFAULT_ARR_POSTGRES_USER}
      PROWLARR__POSTGRES__PASSWORD: ${DEFAULT_ARR_POSTGRES_PASSWORD}
      PROWLARR__POSTGRES__MAINDB: ${DEFAULT_ARR_POSTGRES_MAIN_DB}
      PROWLARR__POSTGRES__LOGDB: ${DEFAULT_ARR_POSTGRES_LOG_DB}
      ARR_SERVICE_PORT: 9696 # Necessary for the healthcheck to work
    labels:
      <<: *traefik-networked-service-labels-base
      # Service definition
      traefik.http.services.prowlarr.loadbalancer.server.port: 9696
      # Router definition
      traefik.http.routers.prowlarr.rule: Host(`prowl.arr.${BASE_DOMAIN}`)
      traefik.http.routers.prowlarr.entrypoints: websecure
      traefik.http.routers.prowlarr.tls: true
      traefik.http.routers.prowlarr.tls.certresolver: default
      traefik.http.routers.prowlarr.service: prowlarr
      traefik.http.routers.prowlarr.middlewares: prowlarr-auth
      # Set priority lower than the OAuth router to ensure OAuth paths are handled first
      traefik.http.routers.prowlarr.priority: 100
    depends_on:
      prowlarr-postgres:
        condition: service_healthy
    networks:
      - traefik_network
      - prowlarr_db_network

  prowlarr-postgres:
    <<: *postgres-service-base
    volumes:
      - <<: *postgres-service-volumes-base
      - prowlarr_db:/var/lib/postgresql/data
    networks:
      - prowlarr_db_network

  prowlarr-oauth2-proxy:
    <<: *oauth2-proxy-service-base
    environment:
      <<: *oauth2-proxy-service-environment-base
      OAUTH2_PROXY_OIDC_ISSUER_URL: ${PROWLARR_OIDC_ISSUER_URL}
      OAUTH2_PROXY_CLIENT_ID: ${PROWLARR_OIDC_CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${PROWLARR_OIDC_CLIENT_SECRET}
      OAUTH2_PROXY_COOKIE_SECRET: ${PROWLARR_OIDC_COOKIE_SECRET}
      OAUTH2_PROXY_REDIRECT_URL: https://prowl.arr.${BASE_DOMAIN}/oauth2/callback
    labels:
      <<: *traefik-networked-service-labels-base
      # Main auth middleware
      traefik.http.middlewares.prowlarr-auth.forwardauth.address: http://prowlarr-oauth2-proxy:4180
      traefik.http.middlewares.prowlarr-auth.forwardauth.authResponseHeaders: X-Auth-Request-User,X-Auth-Request-Email,Authorization
      # Service definition
      traefik.http.services.prowlarr-oauth2-proxy.loadbalancer.server.port: 4180
      # Router definition
      traefik.http.routers.prowlarr-oauth2-proxy.rule: Host(`prowl.arr.${BASE_DOMAIN}`) && PathPrefix(`/oauth2/`)
      traefik.http.routers.prowlarr-oauth2-proxy.entrypoints: websecure
      traefik.http.routers.prowlarr-oauth2-proxy.tls: true
      traefik.http.routers.prowlarr-oauth2-proxy.tls.certresolver: default
      traefik.http.routers.prowlarr-oauth2-proxy.service: prowlarr-oauth2-proxy
      # Set priority higher than the main app router to ensure OAuth paths are handled first
      traefik.http.routers.prowlarr-oauth2-proxy.priority: 110

  radarr:
    <<: *arr-service-base
    image: lscr.io/linuxserver/radarr:${RADARR_IMAGE_TAG}
    volumes:
      - radarr_config:/config
    environment:
      <<: *arr-service-environment-base
      RADARR__AUTH__METHOD: Forms
      RADARR__AUTH__REQUIRED: DisabledForLocalAddresses
      RADARR__POSTGRES__HOST: radarr-postgres
      RADARR__POSTGRES__PORT: ${DEFAULT_ARR_POSTGRES_PORT}
      RADARR__POSTGRES__USER: ${DEFAULT_ARR_POSTGRES_USER}
      RADARR__POSTGRES__PASSWORD: ${DEFAULT_ARR_POSTGRES_PASSWORD}
      RADARR__POSTGRES__MAINDB: ${DEFAULT_ARR_POSTGRES_MAIN_DB}
      RADARR__POSTGRES__LOGDB: ${DEFAULT_ARR_POSTGRES_LOG_DB}
      ARR_SERVICE_PORT: 7878 # Necessary for the healthcheck to work
    labels:
      <<: *traefik-networked-service-labels-base
      # Service definition
      traefik.http.services.radarr.loadbalancer.server.port: 7878
      # Router definition
      traefik.http.routers.radarr.rule: Host(`rad.arr.${BASE_DOMAIN}`)
      traefik.http.routers.radarr.entrypoints: websecure
      traefik.http.routers.radarr.tls: true
      traefik.http.routers.radarr.tls.certresolver: default
      traefik.http.routers.radarr.service: radarr
      traefik.http.routers.radarr.middlewares: radarr-auth
      # Set priority lower than the OAuth router to ensure OAuth paths are handled first
      traefik.http.routers.radarr.priority: 100
    depends_on:
      radarr-postgres:
        condition: service_healthy
    networks:
      - traefik_network
      - radarr_db_network

  radarr-postgres:
    <<: *postgres-service-base
    volumes:
      - <<: *postgres-service-volumes-base
      - radarr_db:/var/lib/postgresql/data
    networks:
      - radarr_db_network

  radarr-oauth2-proxy:
    <<: *oauth2-proxy-service-base
    environment:
      <<: *oauth2-proxy-service-environment-base
      OAUTH2_PROXY_OIDC_ISSUER_URL: ${RADARR_OIDC_ISSUER_URL}
      OAUTH2_PROXY_CLIENT_ID: ${RADARR_OIDC_CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${RADARR_OIDC_CLIENT_SECRET}
      OAUTH2_PROXY_COOKIE_SECRET: ${RADARR_OIDC_COOKIE_SECRET}
      OAUTH2_PROXY_REDIRECT_URL: https://rad.arr.${BASE_DOMAIN}/oauth2/callback
    labels:
      <<: *traefik-networked-service-labels-base
      # Main auth middleware
      traefik.http.middlewares.radarr-auth.forwardauth.address: http://radarr-oauth2-proxy:4180
      traefik.http.middlewares.radarr-auth.forwardauth.authResponseHeaders: X-Auth-Request-User,X-Auth-Request-Email,Authorization
      # Service definition
      traefik.http.services.radarr-oauth2-proxy.loadbalancer.server.port: 4180
      # Router definition
      traefik.http.routers.radarr-oauth2-proxy.rule: Host(`rad.arr.${BASE_DOMAIN}`) && PathPrefix(`/oauth2/`)
      traefik.http.routers.radarr-oauth2-proxy.entrypoints: websecure
      traefik.http.routers.radarr-oauth2-proxy.tls: true
      traefik.http.routers.radarr-oauth2-proxy.tls.certresolver: default
      traefik.http.routers.radarr-oauth2-proxy.service: radarr-oauth2-proxy
      # Set priority higher than the main app router to ensure OAuth paths are handled first
      traefik.http.routers.radarr-oauth2-proxy.priority: 110

  sonarr:
    <<: *arr-service-base
    image: lscr.io/linuxserver/sonarr:${SONARR_IMAGE_TAG}
    volumes:
      - sonarr_config:/config
    environment:
      <<: *arr-service-environment-base
      SONARR__AUTH__METHOD: Forms
      SONARR__AUTH__REQUIRED: DisabledForLocalAddresses
      SONARR__POSTGRES__HOST: sonarr-postgres
      SONARR__POSTGRES__PORT: ${DEFAULT_ARR_POSTGRES_PORT}
      SONARR__POSTGRES__USER: ${DEFAULT_ARR_POSTGRES_USER}
      SONARR__POSTGRES__PASSWORD: ${DEFAULT_ARR_POSTGRES_PASSWORD}
      SONARR__POSTGRES__MAINDB: ${DEFAULT_ARR_POSTGRES_MAIN_DB}
      SONARR__POSTGRES__LOGDB: ${DEFAULT_ARR_POSTGRES_LOG_DB}
      ARR_SERVICE_PORT: 8989 # Necessary for the healthcheck to work
    labels:
      <<: *traefik-networked-service-labels-base
      # Service definition
      traefik.http.services.sonarr.loadbalancer.server.port: 8989
      # Router definition
      traefik.http.routers.sonarr.rule: Host(`son.arr.${BASE_DOMAIN}`)
      traefik.http.routers.sonarr.entrypoints: websecure
      traefik.http.routers.sonarr.tls: true
      traefik.http.routers.sonarr.tls.certresolver: default
      traefik.http.routers.sonarr.service: sonarr
      traefik.http.routers.sonarr.middlewares: sonarr-auth
      # Set priority lower than the OAuth router to ensure OAuth paths are handled first
      traefik.http.routers.sonarr.priority: 100
    depends_on:
      sonarr-postgres:
        condition: service_healthy
    networks:
      - traefik_network
      - sonarr_db_network

  sonarr-postgres:
    <<: *postgres-service-base
    volumes:
      - <<: *postgres-service-volumes-base
      - sonarr_db:/var/lib/postgresql/data
    networks:
      - sonarr_db_network

  sonarr-oauth2-proxy:
    <<: *oauth2-proxy-service-base
    environment:
      <<: *oauth2-proxy-service-environment-base
      OAUTH2_PROXY_OIDC_ISSUER_URL: ${SONARR_OIDC_ISSUER_URL}
      OAUTH2_PROXY_CLIENT_ID: ${SONARR_OIDC_CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${SONARR_OIDC_CLIENT_SECRET}
      OAUTH2_PROXY_COOKIE_SECRET: ${SONARR_OIDC_COOKIE_SECRET}
      OAUTH2_PROXY_REDIRECT_URL: https://son.arr.${BASE_DOMAIN}/oauth2/callback
    labels:
      <<: *traefik-networked-service-labels-base
      # Main auth middleware
      traefik.http.middlewares.sonarr-auth.forwardauth.address: http://sonarr-oauth2-proxy:4180
      traefik.http.middlewares.sonarr-auth.forwardauth.authResponseHeaders: X-Auth-Request-User,X-Auth-Request-Email,Authorization
      # Service definition
      traefik.http.services.sonarr-oauth2-proxy.loadbalancer.server.port: 4180
      # Router definition
      traefik.http.routers.sonarr-oauth2-proxy.rule: Host(`son.arr.${BASE_DOMAIN}`) && PathPrefix(`/oauth2/`)
      traefik.http.routers.sonarr-oauth2-proxy.entrypoints: websecure
      traefik.http.routers.sonarr-oauth2-proxy.tls: true
      traefik.http.routers.sonarr-oauth2-proxy.tls.certresolver: default
      traefik.http.routers.sonarr-oauth2-proxy.service: sonarr-oauth2-proxy
      # Set priority higher than the main app router to ensure OAuth paths are handled first
      traefik.http.routers.sonarr-oauth2-proxy.priority: 110
  
  lidarr:
    <<: *arr-service-base
    image: lscr.io/linuxserver/lidarr:${LIDARR_IMAGE_TAG}
    volumes:
      - lidarr_config:/config
    environment:
      <<: *arr-service-environment-base
      LIDARR__AUTH__METHOD: Forms
      LIDARR__AUTH__REQUIRED: DisabledForLocalAddresses
      LIDARR__POSTGRES__HOST: lidarr-postgres
      LIDARR__POSTGRES__PORT: ${DEFAULT_ARR_POSTGRES_PORT}
      LIDARR__POSTGRES__USER: ${DEFAULT_ARR_POSTGRES_USER}
      LIDARR__POSTGRES__PASSWORD: ${DEFAULT_ARR_POSTGRES_PASSWORD}
      LIDARR__POSTGRES__MAINDB: ${DEFAULT_ARR_POSTGRES_MAIN_DB}
      LIDARR__POSTGRES__LOGDB: ${DEFAULT_ARR_POSTGRES_LOG_DB}
      ARR_SERVICE_PORT: 8686 # Necessary for the healthcheck to work
    labels:
      <<: *traefik-networked-service-labels-base
      # Service definition
      traefik.http.services.lidarr.loadbalancer.server.port: 8686
      # Router definition
      traefik.http.routers.lidarr.rule: Host(`lid.arr.${BASE_DOMAIN}`)
      traefik.http.routers.lidarr.entrypoints: websecure
      traefik.http.routers.lidarr.tls: true
      traefik.http.routers.lidarr.tls.certresolver: default
      traefik.http.routers.lidarr.service: lidarr
      traefik.http.routers.lidarr.middlewares: lidarr-auth
      # Set priority lower than the OAuth router to ensure OAuth paths are handled first
      traefik.http.routers.lidarr.priority: 100
    depends_on:
      lidarr-postgres:
        condition: service_healthy
    networks:
      - traefik_network
      - lidarr_db_network

  lidarr-postgres:
    <<: *postgres-service-base
    volumes:
      - <<: *postgres-service-volumes-base
      - lidarr_db:/var/lib/postgresql/data
    networks:
      - lidarr_db_network

  lidarr-oauth2-proxy:
    <<: *oauth2-proxy-service-base
    environment:
      <<: *oauth2-proxy-service-environment-base
      OAUTH2_PROXY_OIDC_ISSUER_URL: ${LIDARR_OIDC_ISSUER_URL}
      OAUTH2_PROXY_CLIENT_ID: ${LIDARR_OIDC_CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${LIDARR_OIDC_CLIENT_SECRET}
      OAUTH2_PROXY_COOKIE_SECRET: ${LIDARR_OIDC_COOKIE_SECRET}
      OAUTH2_PROXY_REDIRECT_URL: https://lid.arr.${BASE_DOMAIN}/oauth2/callback
    labels:
      <<: *traefik-networked-service-labels-base
      # Main auth middleware
      traefik.http.middlewares.lidarr-auth.forwardauth.address: http://lidarr-oauth2-proxy:4180
      traefik.http.middlewares.lidarr-auth.forwardauth.authResponseHeaders: X-Auth-Request-User,X-Auth-Request-Email,Authorization
      # Service definition
      traefik.http.services.lidarr-oauth2-proxy.loadbalancer.server.port: 4180
      # Router definition
      traefik.http.routers.lidarr-oauth2-proxy.rule: Host(`lid.arr.${BASE_DOMAIN}`) && PathPrefix(`/oauth2/`)
      traefik.http.routers.lidarr-oauth2-proxy.entrypoints: websecure
      traefik.http.routers.lidarr-oauth2-proxy.tls: true
      traefik.http.routers.lidarr-oauth2-proxy.tls.certresolver: default
      traefik.http.routers.lidarr-oauth2-proxy.service: lidarr-oauth2-proxy
      # Set priority higher than the main app router to ensure OAuth paths are handled first
      traefik.http.routers.lidarr-oauth2-proxy.priority: 110

  readarr:
    <<: *arr-service-base
    image: lscr.io/linuxserver/readarr:${READARR_IMAGE_TAG}
    volumes:
      - readarr_config:/config
    environment:
      <<: *arr-service-environment-base
      READARR__AUTH__METHOD: Forms
      READARR__AUTH__REQUIRED: DisabledForLocalAddresses
      READARR__POSTGRES__HOST: READARR-postgres
      READARR__POSTGRES__PORT: ${DEFAULT_ARR_POSTGRES_PORT}
      READARR__POSTGRES__USER: ${DEFAULT_ARR_POSTGRES_USER}
      READARR__POSTGRES__PASSWORD: ${DEFAULT_ARR_POSTGRES_PASSWORD}
      READARR__POSTGRES__MAINDB: ${DEFAULT_ARR_POSTGRES_MAIN_DB}
      READARR__POSTGRES__LOGDB: ${DEFAULT_ARR_POSTGRES_LOG_DB}
      READARR__POSTGRES__CACHEDB: ${DEFAULT_ARR_POSTGRES_CACHE_DB}
      ARR_SERVICE_PORT: 8787 # Necessary for the healthcheck to work
    labels:
      <<: *traefik-networked-service-labels-base
      # Service definition
      traefik.http.services.readarr.loadbalancer.server.port: 8787
      # Router definition
      traefik.http.routers.readarr.rule: Host(`read.arr.${BASE_DOMAIN}`)
      traefik.http.routers.readarr.entrypoints: websecure
      traefik.http.routers.readarr.tls: true
      traefik.http.routers.readarr.tls.certresolver: default
      traefik.http.routers.readarr.service: readarr
      traefik.http.routers.readarr.middlewares: readarr-auth
      # Set priority lower than the OAuth router to ensure OAuth paths are handled first
      traefik.http.routers.readarr.priority: 100
    depends_on:
      readarr-postgres:
        condition: service_healthy
    networks:
      - traefik_network
      - readarr_db_network

  readarr-postgres:
    <<: *postgres-service-base
    volumes:
      - <<: *postgres-service-volumes-base
      - readarr_db:/var/lib/postgresql/data
    environment:
      <<: *postgres-service-environment-base
      POSTGRES_MULTIPLE_DATABASES: main,log,cache
    networks:
      - readarr_db_network

  readarr-oauth2-proxy:
    <<: *oauth2-proxy-service-base
    environment:
      <<: *oauth2-proxy-service-environment-base
      OAUTH2_PROXY_OIDC_ISSUER_URL: ${READARR_OIDC_ISSUER_URL}
      OAUTH2_PROXY_CLIENT_ID: ${READARR_OIDC_CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${READARR_OIDC_CLIENT_SECRET}
      OAUTH2_PROXY_COOKIE_SECRET: ${READARR_OIDC_COOKIE_SECRET}
      OAUTH2_PROXY_REDIRECT_URL: https://read.arr.${BASE_DOMAIN}/oauth2/callback
    labels:
      <<: *traefik-networked-service-labels-base
      # Main auth middleware
      traefik.http.middlewares.readarr-auth.forwardauth.address: http://readarr-oauth2-proxy:4180
      traefik.http.middlewares.readarr-auth.forwardauth.authResponseHeaders: X-Auth-Request-User,X-Auth-Request-Email,Authorization
      # Service definition
      traefik.http.services.readarr-oauth2-proxy.loadbalancer.server.port: 4180
      # Router definition
      traefik.http.routers.readarr-oauth2-proxy.rule: Host(`read.arr.${BASE_DOMAIN}`) && PathPrefix(`/oauth2/`)
      traefik.http.routers.readarr-oauth2-proxy.entrypoints: websecure
      traefik.http.routers.readarr-oauth2-proxy.tls: true
      traefik.http.routers.readarr-oauth2-proxy.tls.certresolver: default
      traefik.http.routers.readarr-oauth2-proxy.service: readarr-oauth2-proxy
      # Set priority higher than the main app router to ensure OAuth paths are handled first
      traefik.http.routers.readarr-oauth2-proxy.priority: 110

  bazarr:
    <<: *service-base
    image: lscr.io/linuxserver/bazarr:${BAZARR_IMAGE_TAG}
    volumes:
      - bazarr_config:/config
    environment:
      <<: *arr-service-environment-base
      POSTGRES_ENABLED: True
      POSTGRES_HOST: bazarr-postgres
      POSTGRES_PORT: ${DEFAULT_ARR_POSTGRES_PORT}
      POSTGRES_USERNAME: ${DEFAULT_ARR_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DEFAULT_ARR_POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${DEFAULT_ARR_POSTGRES_MAIN_DB}
#      BAZARR__AUTH__METHOD: Forms
#      BAZARR__AUTH__REQUIRED: DisabledForLocalAddresses
#      BAZARR__POSTGRES__HOST: bazarr-postgres
#      BAZARR__POSTGRES__PORT: ${DEFAULT_ARR_POSTGRES_PORT}
#      BAZARR__POSTGRES__USER: ${DEFAULT_ARR_POSTGRES_USER}
#      BAZARR__POSTGRES__PASSWORD: ${DEFAULT_ARR_POSTGRES_PASSWORD}
#      BAZARR__POSTGRES__MAINDB: ${DEFAULT_ARR_POSTGRES_MAIN_DB}
#      BAZARR__POSTGRES__LOGDB: ${DEFAULT_ARR_POSTGRES_LOG_DB}
      ARR_SERVICE_PORT: 6767 # Necessary for the healthcheck to work
    labels:
      <<: *traefik-networked-service-labels-base
      # Service definition
      traefik.http.services.bazarr.loadbalancer.server.port: 6767
      # Router definition
      traefik.http.routers.bazarr.rule: Host(`baz.arr.${BASE_DOMAIN}`)
      traefik.http.routers.bazarr.entrypoints: websecure
      traefik.http.routers.bazarr.tls: true
      traefik.http.routers.bazarr.tls.certresolver: default
      traefik.http.routers.bazarr.service: bazarr
      traefik.http.routers.bazarr.middlewares: bazarr-auth
      # Set priority lower than the OAuth router to ensure OAuth paths are handled first
      traefik.http.routers.bazarr.priority: 100
    depends_on:
      bazarr-postgres:
        condition: service_healthy
    networks:
      - traefik_network
      - bazarr_db_network

  bazarr-postgres: # TODO: I don't need anything but main here
    <<: *postgres-service-base
    volumes:
      - <<: *postgres-service-volumes-base
      - bazarr_db:/var/lib/postgresql/data
    networks:
      - bazarr_db_network

  bazarr-oauth2-proxy:
    <<: *oauth2-proxy-service-base
    environment:
      <<: *oauth2-proxy-service-environment-base
      OAUTH2_PROXY_OIDC_ISSUER_URL: ${BAZARR_OIDC_ISSUER_URL}
      OAUTH2_PROXY_CLIENT_ID: ${BAZARR_OIDC_CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${BAZARR_OIDC_CLIENT_SECRET}
      OAUTH2_PROXY_COOKIE_SECRET: ${BAZARR_OIDC_COOKIE_SECRET}
      OAUTH2_PROXY_REDIRECT_URL: https://baz.arr.${BASE_DOMAIN}/oauth2/callback
    labels:
      <<: *traefik-networked-service-labels-base
      # Main auth middleware
      traefik.http.middlewares.bazarr-auth.forwardauth.address: http://bazarr-oauth2-proxy:4180
      traefik.http.middlewares.bazarr-auth.forwardauth.authResponseHeaders: X-Auth-Request-User,X-Auth-Request-Email,Authorization
      # Service definition
      traefik.http.services.bazarr-oauth2-proxy.loadbalancer.server.port: 4180
      # Router definition
      traefik.http.routers.bazarr-oauth2-proxy.rule: Host(`baz.arr.${BASE_DOMAIN}`) && PathPrefix(`/oauth2/`)
      traefik.http.routers.bazarr-oauth2-proxy.entrypoints: websecure
      traefik.http.routers.bazarr-oauth2-proxy.tls: true
      traefik.http.routers.bazarr-oauth2-proxy.tls.certresolver: default
      traefik.http.routers.bazarr-oauth2-proxy.service: bazarr-oauth2-proxy
      # Set priority higher than the main app router to ensure OAuth paths are handled first
      traefik.http.routers.bazarr-oauth2-proxy.priority: 110

volumes:
  traefik_letsencrypt_cert_storage:
    driver: local
  prowlarr_config:
    driver: local
  prowlarr_db:
    driver: local
  radarr_config:
    driver: local
  radarr_db:
    driver: local
  sonarr_config:
    driver: local
  sonarr_db:
    driver: local
  lidarr_config:
    driver: local
  lidarr_db:
    driver: local
  readarr_config:
    driver: local
  readarr_db:
    driver: local
  bazarr_config:
    driver: local
  bazarr_db:
    driver: local


networks:
  traefik_network:
    name: traefik_network
    driver: bridge
    internal: false  # This network is accessible from outside
  prowlarr_db_network:
    internal: true  # This network is not accessible from outside
  radarr_db_network:
    internal: true  # This network is not accessible from outside
  sonarr_db_network:
    internal: true  # This network is not accessible from outside
  lidarr_db_network:
    internal: true  # This network is not accessible from outside
  readarr_db_network:
    internal: true  # This network is not accessible from outside
  bazarr_db_network:
    internal: true  # This network is not accessible from outside